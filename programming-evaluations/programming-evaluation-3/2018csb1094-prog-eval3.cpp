/*
PROGRAMMING EVALUATION 3
Hansin Ahuja - 2018csb1094

- This code works for valid inputs only.
- It has also been assumed that input size is limited in accordance with the maximum array sizes that C++ can handle.
- The above assumption includes assuming that m<10^6. This assumption can be modified in the beginning of the program by defining MAX accordingly.
- The only libraries that have been imported are the ones which include the rand(), srand() and time() functions.
- Time complexity analysis has been given at the end.
*/

#include <iostream>
#include <cstdlib>              // To use the rand() and srand() functions
#include <ctime>                // To use the time() function
#define ll long long int
#define MAX 1000000
using namespace std;


// Returns ((b^e)%p) in O(log e) time
ll power_with_mod(ll b, ll e, ll p){
    ll ans = 1;
    b %= p;
    while (e>0){ 
        if(e%2==1) ans = (ans*b)%p; 
        e /= 2;
        b = (b*b)%p;   
    } 
    return ans; 
}

// Array to store m queries
int l1[MAX], r1[MAX], l2[MAX], r2[MAX];

int main(){
    
    // Seeding the random function with the current time
    srand(time(0));

    // Array to sample random primes
    ll primes[] = {10100089, 10218557, 10324939, 10451461, 10570633, 10686359, 10797841, 10927219, 11054201, 11178679, 11284387, 11412571, 11535899, 11652727, 11762689, 11863183, 11966179, 12078139, 12182977, 12288427, 12420823, 12535433, 12639353, 12739513, 12839809, 12952207, 13069643, 13188367, 13308089, 13428049, 13533503, 13655231, 13770011, 13881551, 13983421, 14103359, 14229029, 14355337, 14472373, 14582287, 14710991, 14834803, 14966131, 15096479, 15214163, 15318829, 15434021, 15541733, 15669989, 15776869, 15902423, 16030073, 16162739, 16295509, 16415561, 16528427, 16637183, 16746931, 16874467, 16975253, 17087573, 17190629, 17312833, 17414693, 17514989, 17645101, 17754157, 17863121, 17982397, 18105049, 18232507, 18356321, 18472247, 18579019, 18703397, 18818749, 18933779, 19064891, 19189327, 19292887, 19412537, 19525193, 19649281, 19769251, 19888021, 19999873, 20104867, 20212259, 20326213, 20452559, 20569511, 20701951, 20826601, 20937953, 21043493, 21165047, 21281201, 21383287, 21506257, 21622801, 21727637, 21858769, 21963433, 22093121, 22215833, 22325767, 22439761, 22542103, 22673809, 22796203, 22901233, 23029991, 23156933, 23276051, 23382343, 23488181, 23614973, 23730557, 23835677, 23952193, 24076187, 24189481, 24298643, 24417311, 24539677, 24664457, 24788207, 24903787, 25007839, 25119893, 25247249, 25348417, 25465369, 25587113, 25701083, 25804543, 25935653, 26065847, 26183869, 26295253, 26410717, 26523019, 26650801, 26761199, 26876149, 26985071, 27117317, 27227077, 27351299, 27469913, 27576337, 27701287, 27828797, 27941833, 28058249, 28187441, 28288363, 28420963, 28539733, 28641401, 28758817, 28865197, 28992823, 29113369, 29234963, 29341451, 29469059, 29573107, 29676719, 29801071, 29911363, 30042203, 30151579, 30262607, 30367223, 30491273, 30618631, 30741839, 30861521, 30986009, 31094303, 31199057, 31299127, 31401133, 31527569, 31655509, 31762411, 31866203, 31984331, 32084803, 32188537, 32303437, 32428087, 32550599, 32668409, 32770853, 32885179, 32991841, 33114661, 33224207, 33338531, 33446159, 33565121, 33682639, 33803249, 33908503, 34025051, 34156613, 34279423, 34409737, 34515991, 34627027, 34732877, 34865491, 34980487, 35113193, 35216393, 35336879, 35440003, 35554349, 35684881, 35786477, 35915801, 36025313, 36132779, 36258041, 36371501, 36478121, 36598717, 36718531, 36833341, 36948641, 37068247, 37189051, 37317073, 37444241, 37564739, 37688369, 37806911, 37919207, 38025259, 38149439, 38267641, 38397299, 38505281, 38611501, 38731331, 38854237, 38973409, 39084937, 39201157, 39303809, 39428087, 39548203, 39668543, 39791209, 39917587, 40022483, 40141379, 40269833, 40399717, 40519867, 40643747, 40745171, 40867063, 40999117, 41109461, 41228113, 41338147, 41443867, 41547427, 41675923, 41803829, 41928251, 42033337, 42144079, 42246713, 42349249, 42470257, 42597151, 42715061, 42829793, 42943217, 43053029, 43168291, 43284721, 43389751, 43500341, 43624531, 43734841, 43861963, 43993393, 44122037, 44245819, 44355653, 44486597, 44590787, 44692981, 44818703, 44935909, 45055891, 45187253, 45289627, 45418327, 45539803, 45650359, 45753797, 45870347, 45977803, 46087337, 46217489, 46335551, 46457287, 46561043, 46677193, 46789649, 46905959, 47031967, 47148677, 47261209, 47383759, 47501203, 47621089, 47734051, 47834251, 47957453, 48060769, 48181201, 48309517, 48425653, 48550153, 48666463, 48778931, 48904697, 49022819, 49134529, 49265863, 49386539, 49492351, 49604617, 49708931, 49833313, 49964501, 50084557, 50185477, 50296289, 50398151, 50519099, 50623421, 50751193, 50879527, 50999093, 51122759, 51250777, 51351359, 51455507, 51578707, 51698939, 51806077, 51908239, 52013777, 52134239, 52245419, 52355911, 52467971, 52589639, 52715933, 52842373, 52959637, 53079701, 53205881, 53335421, 53440169, 53560831, 53674039, 53782361, 53886839, 54014881, 54117053, 54231103, 54349909, 54459817, 54577813, 54685229, 54795439, 54899071, 55025561, 55129979, 55239299, 55365131, 55494503, 55620401, 55744781, 55864943, 55976783, 56104871, 56212369, 56340689, 56448209, 56556389, 56674181, 56806487, 56908277, 57010973, 57128189, 57242203, 57345329, 57453821, 57583039, 57690671, 57795499, 57899617, 58030157, 58132787, 58234339, 58336319, 58447349, 58577341, 58690417, 58804631, 58935647, 59063093, 59180617, 59308241, 59430971, 59544007, 59652503, 59752681, 59869919, 60001223, 60114319, 60222221, 60341453, 60449821, 60572263, 60703249, 60817571, 60946783, 61047023, 61177871, 61297679, 61423459, 61542361, 61647041, 61754327, 61866887, 61967039, 62080741, 62183449, 62305081, 62433103, 62535241, 62661839, 62783551, 62906243, 63032551, 63149987, 63272467, 63377161, 63499759, 63623621, 63749111, 63850151, 63978623, 64099747, 64222901, 64325707, 64443803, 64574899, 64676831, 64785857, 64890629, 65022827, 65143157, 65252743, 65382979, 65495039, 65617801, 65724973, 65830091, 65938007, 66055097, 66184663, 66288191, 66417781, 66532289, 66634927, 66760567, 66866197, 66998131, 67123571, 67252093, 67358999, 67473971, 67574131, 67698737, 67802503, 67915777, 68025983, 68158543};
    // Size of primes[]
    int nprimes = 500;

    // Convert bit string to decimal equivalent using random base 
    ll base = 2;

    // Input section
    int n;
    cin>>n;
    int a[n];
    for(int i=0; i<n; i++){      // Loop 1
        char c;
        cin>>c;
        a[i] = c - '0';
    }

    int m;
    cin>>m;
    bool ans[m];

    for(int i=0; i<m; i++){      // Loop 2

        // Initialize answer array with true
        ans[i] = true;

        int temp;
        cin>>l1[i]>>r1[i]>>l2[i]>>r2[i];

        // Swapping (i, j) and (k, l) if i<k
        if(l1[i]<l2[i]){
            temp = l1[i];
            l1[i] = l2[i];
            l2[i] = temp;
            temp = r1[i];
            r1[i] = r2[i];
            r2[i] = temp;
        }

        // For zero indexing
        l1[i]--;
        r1[i]--;
        l2[i]--;
        r2[i]--;
    }

    // Run the entire algorithm with 'runs' random primes
    int runs = 5;

    while(runs--){                                  // Loop 3

        // Sample a random prime
        ll p = primes[rand() % nprimes];

        // Sample a random base
        base = 2 + (rand() % (n - 2 + 1));

        // Preprocess/hash the entire string
        ll hash[n+1];
        hash[0] = 0;
        for(int i=1; i<=n; i++){                     // Loop 4
            hash[i] = base*hash[i-1] + a[i-1];
            hash[i] = hash[i] % p;
        }

        // For loop to handle m queries
        for(int i=0; i<m; i++){                      // Loop 5

            // If lengths of substrings are unequal, return 0
            if(r1[i]-l1[i] != r2[i]-l2[i]){
                ans[i] = ans[i]&0;
                continue;
            }

            // hxi = hash value of i-th substring 
            // h(x) = (decimal equivalent of x in base 'base')%p
            ll hx1, hx2;
            ll x, y;
            x = hash[r1[i]+1];
            y = hash[l1[i]] * power_with_mod(base, r1[i]-l1[i]+1, p);
            y = y % p;
            hx1 = x - y;
            x = hash[r2[i]+1];
            y = hash[l2[i]] * power_with_mod(base, r2[i]-l2[i]+1, p);
            y = y % p;
            hx2 = x - y;
            if(hx1<0) hx1 = (hx1 + p) % p;
            if(hx2<0) hx2 = (hx2 + p) % p;

            // If hash values are unequal for even one run, return 0. Else, return 1.
            if(hx1!=hx2) ans[i] = false;

        }
    }

    // Print output
    for(int i=0; i<m; i++){         // Loop 6
        if(ans[i]) cout<<1<<endl;
        else cout<<0<<endl;     
    }      
    
}

/*
Time complexity analysis:
Loop 1: O(n)
Loop 2: O(m)
Loop 4: O(n)
Loop 5: O(m logn), because there are two calls made to power_with_mod() inside this loop
Loop 3: O(runs * (n + m logn)) = O(n + mlogn) as runs = 5
Loop 6: O(m)

So, total complexity = O(n + mlogn)
*/
